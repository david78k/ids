Description

1. The steps we took to develop the code:
- 1) non-MR on local machine: thought that it was going to be easy to convert
  non-MR to MR.
- 2) MR with Hadoop on local machine
- 3) EMR on AWS
 
2. Difficulties we faced:
- parsing xml page was not easy. at first, we were trying to use a parser
library, but we couldn't get it right. After all, we parsed manually to get
what we want.

- too many specifications to follow

- data manipulation: sort, order, key-valye mapping, indexing,
  
- creating a jar file: combine separate files (external jars) into one was hard

- normalizing matrices to make the matrix column stochastic

- arranging (managing, adjusting) output directory layout is clumsy

- apache hadoop mapreduce related classes dependency complex, setup/import
  related classes

- mapreduce class type input/output, key/value class type so complex and
  confusing

- Although the required mapreduce API (version 1.0.3) that is quite old supports both old API (mapred.*) and new API (mapreduce.*), the old API doesn't work for some cases. should have
  been noted beforehand

- long procedure to run pagerank on EMR: installing many things to use command line tool for running client scripts

- testing and debugging are pains in the ass. every time the code has been changed, it has to
  be compiled/jared/uploaded. the worst thing is to wait for the cluster to be
initialized and run the jar application

- s3 API for Java to store output into s3bucket/results folder

- output file arrangement is messed up. naming files to meet the requirements
  like inlinks.out, n.out ...

- passing multiple arguments using emr command line tool was not easy

3. How we solved the problems:
to solve the output file conflict problems, I created files with the current
date and time.  
 
4. What we learned
easier to run mapreduce application on AWS EMR rather than running on local
machine which requires lots of work to set things up. this allows us to focus
on developing our application 
 
5. Optimizations
- sparse matrix (deprecated) for the adjacency matrix A as most of the entries are zero
